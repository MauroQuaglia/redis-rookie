# Il dump.rb viene salvato nel volume redis7-tps-data grazie al mapping redis7-tps-data:/data.
  # Normalmente, su una macchina fisica vengono salvati in /data/dump.rb.
# Inoltre c'è un processo schedulato che salva anche questo file su min.io.
# Quando parte l'RDB viene creato un processo figlio che si occupa del salvataggio dei dati.
  # Tipicamente viene usato un BGSAVE che non è bloccante ma in determinate situazioni Redis può decidere di usare SAVE che invece è bloccante per cui in quel frangente Redis smetterebbe di servire i client.
# Per questo l'idea era di salvare i dati una volta ogni ora, invece che una volta ogni 5 minuti come facciamo ora.
# ORIGINALE:
  # save 3600 1 300 100 60 10000
save 3600 1





# Anche se Docker ha meccanismi di gestione della memoria, Redis non ha modo di sapere quando sta per esaurire la RAM del container, a meno che non gli imponi un limite.
# Senza maxmemory, Redis continuerà a crescere fino a quando Docker non lo termina per OOM (Out Of Memory).
# Possibile roblema senza maxmemory
  # Se Docker uccide Redis per mancanza di memoria, perdi tutte le chiavi volatili e interrompi Sidekiq.
# Se impostiamo maxmemory, Redis inizierà a rimuovere le chiavi vecchie prima di raggiungere il limite o a non salvare le nuove in base alla politica di eviction.
# ORIGINALE:
  # maxmemory 0
  # maxmemory-policy noeviction
# Potremmo impostare solo il maxmemory per evitare un possibile kill di Redis.
# free -h sulla macchina:
#                total        used
# Mem:            15Gi       4.4Gi
maxmemory 8GB





# Chiude le connessioni che sono in idle da troppo tempo.
# ORIGINALE:
  # timeout 0
timeout 300